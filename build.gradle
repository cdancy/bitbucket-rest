buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'checkstyle'

apply from: "$rootDir/gradle/additional-artifacts.gradle"
apply from: "$rootDir/gradle/dependencies.gradle"
apply from: "$rootDir/gradle/documentation.gradle"
apply from: "$rootDir/gradle/publishing.gradle"
apply from: "$rootDir/gradle/release.gradle"

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile ('org.apache.jclouds:jclouds-core:2.0.0') 
    compile ('org.apache.jclouds.driver:jclouds-okhttp:2.0.0') 
    compile ('com.google.auto.service:auto-service:1.0-rc2') 
    compile ('com.google.auto.value:auto-value:1.2')
    
    testCompile ('org.apache.jclouds:jclouds-core:2.0.0:tests')
    testCompile ('org.testng:testng:6.8.21') 
    testCompile ('org.assertj:assertj-core:1.7.0') 
    testCompile ('com.squareup.okhttp:mockwebserver:2.2.0') 
    testCompile ('org.apache.jclouds.driver:jclouds-slf4j:2.0.0') 
    testCompile ('ch.qos.logback:logback-core:1.1.2') 
    testCompile ('ch.qos.logback:logback-classic:1.1.2')
}

ext.compatibilityVersion = '1.7'
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

jar {
    manifest {
        attributes 'Implementation-Title': 'Bitbucket REST client',
                   'Implementation-Version': version,
                   'Built-By': System.getProperty('user.name'),
                   'Built-Date': new Date(),
                   'Built-JDK': System.getProperty('java.version'),
                   'Built-Gradle': gradle.gradleVersion
    }
}

checkstyle {
    toolVersion = "6.13"
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:-options"]
}

task mockTest(type: Test) {
    useTestNG() 
	include "**/**MockTest.class"
	testLogging {
		showStandardStreams = true
		events 'started', 'passed', 'failed'
	}
}

task integTest(type: Test, dependsOn: ['mockTest']) {
    useTestNG() 
    include "**/**LiveTest.class"
    testLogging {
		showStandardStreams = true
        events 'started', 'passed', 'failed'
    } 
    systemProperties = ["test.bitbucket.endpoint" : "${testBitbucketEndpoint}",
    					"test.bitbucket.credential" : "${testBitbucketCredential}"]
}
