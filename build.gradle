buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:4.10.0'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'eclipse'
apply plugin: 'nebula.compile-api'

apply from: "$rootDir/gradle/additional-artifacts.gradle"
apply from: "$rootDir/gradle/dependencies.gradle"
apply from: "$rootDir/gradle/documentation.gradle"
apply from: "$rootDir/gradle/publishing.gradle"
apply from: "$rootDir/gradle/release.gradle"

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compileApi ('org.apache.jclouds:jclouds-core:2.0.1') 
    compileApi ('com.google.auto.service:auto-service:1.0-rc3') 
    compileApi ('com.google.auto.value:auto-value:1.4.1')
    
    testCompile ('org.apache.jclouds:jclouds-core:2.0.1:tests')
    testCompile ('org.testng:testng:6.11') 
    testCompile ('org.assertj:assertj-core:3.6.2') 
    testCompile ('com.squareup.okhttp:mockwebserver:2.2.0') 
    testCompile ('org.apache.jclouds.driver:jclouds-slf4j:2.0.1') 
    testCompile ('ch.qos.logback:logback-core:1.2.1') 
    testCompile ('ch.qos.logback:logback-classic:1.2.1')
}

ext.compatibilityVersion = '1.7'
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

jar {
    manifest {
        attributes 'Implementation-Title': 'Bitbucket REST client',
                   'Implementation-Version': version,
                   'Built-By': System.getProperty('user.name'),
                   'Built-Date': new Date(),
                   'Built-JDK': System.getProperty('java.version'),
                   'Built-Gradle': gradle.gradleVersion
    }
}

checkstyle {
    toolVersion = "6.13"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:-options"]
}

task mockTest(type: Test) {
    useTestNG() 
    include "**/**MockTest.class"
    maxParallelForks = 2
    testLogging {
        showStandardStreams = true
        events 'started', 'passed', 'failed'
    }
}

task integTest(type: Test, dependsOn: ['mockTest']) {
    doFirst {
        def integProjectDir = project.file("${buildDir}/integ-projects")
        if (!integProjectDir.exists()) {
            if (!integProjectDir.mkdirs()) {
                throw new RuntimeException("Failed to create integ-project directory @ ${integProjectDir.path}")
            }
        }
    }
    useTestNG() 
    include "**/**LiveTest.class"
    testLogging {
        showStandardStreams = true
        events 'started', 'passed', 'failed'
    } 
    systemProperties = ["test.bitbucket.endpoint" : "${testBitbucketEndpoint}",
                        "test.bitbucket.credential" : "${testBitbucketCredential}",
                        "test.bitbucket.project" : "${testBitbucketProject}",
                        "test.bitbucket.basedir" : "${buildDir}/integ-projects"]
}
