plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    //id 'checkstyle'
    id 'jacoco'
    id 'eclipse'
    id 'pmd'
}

apply from: "$rootDir/gradle/additional-artifacts.gradle"
apply from: "$rootDir/gradle/dependencies.gradle"
apply from: "$rootDir/gradle/publishing.gradle"
apply from: "$rootDir/gradle/release.gradle"


repositories {
    mavenCentral()
}

dependencies {
    ext.jcloudsVersion = '2.5.0'
    ext.autoServiceVersion = '1.0.1'
    ext.autoValueVersion = '1.10'
    ext.guiceVersion = '5.1.0'

    // The transitive dependencies that are exposed via the public API of this project
    api 'com.google.code.gson:gson:2.9.1'

    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation ("org.apache.jclouds:jclouds-core:${jcloudsVersion}")
    implementation ("com.google.inject:guice:${guiceVersion}")
    implementation ("com.google.inject.extensions:guice-assistedinject:${guiceVersion}")
    implementation ("com.google.auto.value:auto-value-annotations:${autoValueVersion}")
    annotationProcessor ("com.google.auto.value:auto-value:${autoValueVersion}")
    implementation ("com.google.auto.service:auto-service-annotations:${autoServiceVersion}")
    annotationProcessor ("com.google.auto.service:auto-service:${autoServiceVersion}")

    implementation ('javax.xml.bind:jaxb-api:2.3.1')

    testImplementation ("org.apache.jclouds:jclouds-core:${jcloudsVersion}:tests")
    testImplementation ("org.apache.jclouds.driver:jclouds-slf4j:${jcloudsVersion}")
    testImplementation ('org.assertj:assertj-core:3.23.1')
    testImplementation ('org.testng:testng:7.6.1')
    testImplementation ('com.squareup.okhttp:mockwebserver:2.7.5')
    testImplementation ('ch.qos.logback:logback-classic:1.4.4')
    testImplementation ('ch.qos.logback:logback-core:1.4.1')
    testImplementation ('commons-io:commons-io:2.11.0')
}

ext.compatibilityVersion = JavaVersion.VERSION_11
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

jar {
    manifest {
        attributes 'Implementation-Title': 'Bitbucket REST client',
                   'Implementation-Version': archiveVersion,
                   'Built-By': System.getProperty('user.name'),
                   'Built-Date': new Date(),
                   'Built-JDK': System.getProperty('java.version'),
                   'Built-Gradle': gradle.gradleVersion
    }
}

/*
checkstyle {
    toolVersion = "6.13"
}
 */

pmd {
    ruleSetConfig = resources.text.fromFile(rootProject.file('config/pmd/pmd.xml'))
    consoleOutput = true
    ignoreFailures = false
    ruleSets = []
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

tasks.withType(Pmd) {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:-options']
}

task mockTest(type: Test) {
    useTestNG()
    include '**/**MockTest.class'
    maxParallelForks = 2
    testLogging {
        showStandardStreams = true
        events 'started', 'passed', 'failed'
    }
}

task integTest(type: Test, dependsOn: ['mockTest']) {
    doFirst {
        def integProjectDir = project.file("${buildDir}/integ-projects")
        if (!integProjectDir.exists()) {
            if (!integProjectDir.mkdirs()) {
                throw new RuntimeException("Failed to create integ-project directory @ ${integProjectDir.path}")
            }
        }
    }
    useTestNG()
    include '**/**LiveTest.class'
    testLogging {
        showStandardStreams = true
        events 'started', 'passed', 'failed'
    }
    def authentication = [:]
    def possibleAuth = project.findProperty('testBitbucketRestCredentials')
    if (possibleAuth) {
        authentication['test.bitbucket.rest.credentials'] = possibleAuth
    } else {
        possibleAuth = project.findProperty('testBitbucketRestToken')
        if (possibleAuth) {
            authentication['test.bitbucket.rest.token'] = possibleAuth
        } else {
            logger.quiet 'No authentication parameters found. Assuming anonymous...'
        }
    }

    // property 'test.bitbucket.endpoint' needs to be
    // hard-coded in for jclouds test framework
    systemProperties = ["test.bitbucket.endpoint" : "${testBitbucketRestEndpoint}",
                        "test.bitbucket.project" : "${testBitbucketRestProject}",
                        "test.bitbucket.basedir" : "${buildDir}/integ-projects"] << authentication
}

javadoc {
    source = sourceSets.main.allJava
    options.with {
        links "https://docs.oracle.com/en/java/javase/${compatibilityVersion}/docs/api"
        links "https://google.github.io/guice/api-docs/${dependencies.guiceVersion}/javadoc/"
        addStringOption('Xdoclint:none', '-quiet')
    }
}
